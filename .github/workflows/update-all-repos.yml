name: Update All Repos JSON

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests PyGithub

      - name: Update all JSON files
        id: update_all
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > update_all_repos.py << 'EOF'
          import json
          import os
          from datetime import datetime
          from github import Github
          import requests

          def get_file_size(url):
              response = requests.head(url)
              return int(response.headers.get('content-length', 0))

          def create_initial_piliplus_json():
              return {
                  "identifier": "com.bggRGjQaUbCoE.PiliPlus",
                  "sourceURL": "https://raw.githubusercontent.com/bggRGjQaUbCoE/PiliPlus/main/piliplus.json",
                  "apps": [
                      {
                          "name": "PiliPlus",
                          "bundleIdentifier": "com.bggRGjQaUbCoE.PiliPlus",
                          "developerName": "bggRGjQaUbCoE",
                          "subtitle": "第三方哔哩哔哩客户端",
                          "localizedDescription": "PiliPlus 是一款第三方哔哩哔哩客户端，专为 iOS 设备打造。",
                          "iconURL": "https://raw.githubusercontent.com/bggRGjQaUbCoE/PiliPlus/main/assets/images/logo/logo.png",
                          "tintColor": "#FB7299",
                          "screenshotURLs": [
                              "https://raw.githubusercontent.com/bggRGjQaUbCoE/PiliPlus/main/assets/screenshots/home.png",
                              "https://raw.githubusercontent.com/bggRGjQaUbCoE/PiliPlus/main/assets/screenshots/main_screen.png"
                          ],
                          "version": "",
                          "versionDate": "",
                          "downloadURL": "",
                          "size": 0,
                          "versionDescription": ""
                      }
                  ]
              }

          def update_repo_json(repo_owner, repo_name, json_file_name, initial_json_func=None):
              github_token = os.environ['GITHUB_TOKEN']
              g = Github(github_token)
              
              try:
                  repo = g.get_repo(f"{repo_owner}/{repo_name}")
                  latest_release = repo.get_latest_release()
                  
                  ipa_asset = None
                  for asset in latest_release.get_assets():
                      if asset.name.endswith('.ipa'):
                          ipa_asset = asset
                          break
                  
                  if not ipa_asset:
                      print(f"[{json_file_name}] No IPA file found in latest release for {repo_owner}/{repo_name}. Skipping update.")
                      return False
                  
                  source_data = {}
                  file_exists = os.path.exists(json_file_name)
                  file_was_created = False

                  if file_exists:
                      try:
                          with open(json_file_name, 'r', encoding='utf-8') as f:
                              source_data = json.load(f)
                          print(f"[{json_file_name}] Loaded existing data.")
                      except json.JSONDecodeError:
                          print(f"[{json_file_name}] Existing {json_file_name} is invalid. Attempting to recreate.")
                          if initial_json_func:
                              source_data = initial_json_func()
                              file_was_created = True
                              print(f"[{json_file_name}] Recreated initial data from function.")
                          else:
                              print(f"[{json_file_name}] No valid initial JSON function for recreation. Aborting.")
                              return False
                  else:
                      print(f"[{json_file_name}] {json_file_name} not found locally. Attempting to create new.")
                      if initial_json_func:
                          source_data = initial_json_func()
                          file_was_created = True
                          print(f"[{json_file_name}] Created initial data from function.")
                      else:
                          print(f"[{json_file_name}] No initial JSON function specified and {json_file_name} does not exist. Cannot proceed.")
                          return False

                  if 'apps' not in source_data or not source_data['apps']:
                      print(f"[{json_file_name}] 'apps' array not found or is empty in {json_file_name}.")
                      return False

                  app_data = source_data['apps'][0]

                  current_version = app_data.get('version', '')
                  new_version = latest_release.tag_name.lstrip('v')
                  current_download_url = app_data.get('downloadURL','')
                  new_download_url = ipa_asset.browser_download_url

                  if not file_was_created and current_version == new_version and current_download_url == new_download_url:
                      print(f"[{json_file_name}] Current version '{current_version}' is already the latest with same download URL. No update needed.")
                      return False

                  app_data.update({
                      'version': new_version,
                      'versionDate': latest_release.published_at.strftime("%Y-%m-%dT%H:%M:%SZ"),
                      'downloadURL': new_download_url,
                      'size': ipa_asset.size,
                      'versionDescription': latest_release.body
                  })
                  print(f"[{json_file_name}] Updated version to: {new_version}")

                  with open(json_file_name, 'w', encoding='utf-8') as f:
                      json.dump(source_data, f, ensure_ascii=False, indent=2)
                  print(f"[{json_file_name}] Successfully updated {json_file_name}")
                  return True
                  
              except Exception as e:
                  print(f"[{json_file_name}] Error updating {json_file_name}: {str(e)}")
                  return False

          def main():
              github_output_path = os.environ.get('GITHUB_OUTPUT')
              
              def set_github_output(name, value):
                  if github_output_path:
                      with open(github_output_path, 'a') as f:
                          f.write(f"{name}={value}\n")
                  else:
                      print(f"Warning: GITHUB_OUTPUT environment variable not found. Cannot set output '{name}'.")

              updated_files = []
              
              # 更新 Kazumi
              print("=== Updating Kazumi ===")
              if update_repo_json("Predidit", "Kazumi", "kazumi.json"):
                  updated_files.append("kazumi.json")
              
              # 更新 PiliPlus
              print("\n=== Updating PiliPlus ===")
              if update_repo_json("bggRGjQaUbCoE", "PiliPlus", "piliplus.json", create_initial_piliplus_json):
                  updated_files.append("piliplus.json")
              
              if updated_files:
                  print(f"\nUpdated files: {', '.join(updated_files)}")
                  set_github_output("updated", "true")
                  set_github_output("files", " ".join(updated_files))
              else:
                  print("\nNo files were updated.")
                  set_github_output("updated", "false")

          if __name__ == '__main__':
              main()
          EOF
          
          python update_all_repos.py

      - name: Commit and push all changes
        if: steps.update_all.outputs.updated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 添加所有更改的文件
          git add -A
          
          # 检查是否有更改需要提交
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # 提交更改
          UPDATED_FILES="${{ steps.update_all.outputs.files }}"
          if [ -n "$UPDATED_FILES" ]; then
            git commit -m "chore: update JSON files with latest release info - Updated files: $UPDATED_FILES"
          else
            git commit -m "chore: update JSON files with latest release info"
          fi
          
          # 推送到 main 分支
          git push origin main
